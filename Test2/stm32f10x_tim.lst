
C:\Users\Adrian\Desktop\Termostat\Test2\stm32f10x_tim.o:     file format elf32-littlearm
C:\Users\Adrian\Desktop\Termostat\Test2\stm32f10x_tim.o

Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:227
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   0:	b410      	push	{r4}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:235
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
   2:	8803      	ldrh	r3, [r0, #0]
   4:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:237

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
   8:	f642 4200 	movw	r2, #11264	; 0x2c00
   c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  10:	f243 4300 	movw	r3, #13312	; 0x3400
  14:	f2c4 0301 	movt	r3, #16385	; 0x4001
  18:	4298      	cmp	r0, r3
  1a:	bf14      	ite	ne
  1c:	2300      	movne	r3, #0
  1e:	2301      	moveq	r3, #1
  20:	4290      	cmp	r0, r2
  22:	bf14      	ite	ne
  24:	461c      	movne	r4, r3
  26:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
  2a:	b9f4      	cbnz	r4, 6a <TIM_TimeBaseInit+0x6a>
  2c:	f240 4300 	movw	r3, #1024	; 0x400
  30:	f2c4 0300 	movt	r3, #16384	; 0x4000
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2300      	movne	r3, #0
  3a:	2301      	moveq	r3, #1
  3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40:	bf08      	it	eq
  42:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  46:	b983      	cbnz	r3, 6a <TIM_TimeBaseInit+0x6a>
  48:	f640 0200 	movw	r2, #2048	; 0x800
  4c:	f2c4 0200 	movt	r2, #16384	; 0x4000
  50:	f640 4300 	movw	r3, #3072	; 0xc00
  54:	f2c4 0300 	movt	r3, #16384	; 0x4000
  58:	4298      	cmp	r0, r3
  5a:	bf14      	ite	ne
  5c:	2300      	movne	r3, #0
  5e:	2301      	moveq	r3, #1
  60:	4290      	cmp	r0, r2
  62:	bf08      	it	eq
  64:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  68:	b143      	cbz	r3, 7c <TIM_TimeBaseInit+0x7c>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:241
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
  6a:	f64f 738f 	movw	r3, #65423	; 0xff8f
  6e:	f2c0 0300 	movt	r3, #0	; 0x0
  72:	ea0c 0303 	and.w	r3, ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:242
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  76:	884a      	ldrh	r2, [r1, #2]
  78:	ea43 0c02 	orr.w	ip, r3, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:245
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  7c:	f241 0200 	movw	r2, #4096	; 0x1000
  80:	f2c4 0200 	movt	r2, #16384	; 0x4000
  84:	f241 4300 	movw	r3, #5120	; 0x1400
  88:	f2c4 0300 	movt	r3, #16384	; 0x4000
  8c:	1ac3      	subs	r3, r0, r3
  8e:	bf18      	it	ne
  90:	2301      	movne	r3, #1
  92:	4290      	cmp	r0, r2
  94:	bf0c      	ite	eq
  96:	2300      	moveq	r3, #0
  98:	f003 0301 	andne.w	r3, r3, #1	; 0x1
  9c:	b143      	cbz	r3, b0 <TIM_TimeBaseInit+0xb0>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:248
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
  9e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
  a2:	f2c0 0300 	movt	r3, #0	; 0x0
  a6:	ea0c 0303 	and.w	r3, ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:249
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  aa:	88ca      	ldrh	r2, [r1, #6]
  ac:	ea43 0c02 	orr.w	ip, r3, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:252
  }

  TIMx->CR1 = tmpcr1;
  b0:	f8a0 c000 	strh.w	ip, [r0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:255

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  b4:	888b      	ldrh	r3, [r1, #4]
  b6:	8583      	strh	r3, [r0, #44]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:258
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  b8:	880b      	ldrh	r3, [r1, #0]
  ba:	8503      	strh	r3, [r0, #40]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:260
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
  bc:	b9b4      	cbnz	r4, ec <TIM_TimeBaseInit+0xec>
  be:	f244 0200 	movw	r2, #16384	; 0x4000
  c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
  c6:	f244 4300 	movw	r3, #17408	; 0x4400
  ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
  ce:	4298      	cmp	r0, r3
  d0:	bf14      	ite	ne
  d2:	2300      	movne	r3, #0
  d4:	2301      	moveq	r3, #1
  d6:	4290      	cmp	r0, r2
  d8:	bf08      	it	eq
  da:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  de:	b92b      	cbnz	r3, ec <TIM_TimeBaseInit+0xec>
  e0:	f644 0300 	movw	r3, #18432	; 0x4800
  e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
  e8:	4298      	cmp	r0, r3
  ea:	d101      	bne.n	f0 <TIM_TimeBaseInit+0xf0>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:263
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  ec:	7a0b      	ldrb	r3, [r1, #8]
  ee:	8603      	strh	r3, [r0, #48]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:268
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
  f0:	f04f 0301 	mov.w	r3, #1	; 0x1
  f4:	8283      	strh	r3, [r0, #20]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:269
}
  f6:	bc10      	pop	{r4}
  f8:	4770      	bx	lr
  fa:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:280
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b4f0      	push	{r4, r5, r6, r7}
   2:	460c      	mov	r4, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:289
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
   4:	8c03      	ldrh	r3, [r0, #32]
   6:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   a:	ea4f 4303 	mov.w	r3, r3, lsl #16
   e:	ea4f 4313 	mov.w	r3, r3, lsr #16
  12:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:291
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  14:	8c01      	ldrh	r1, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:293
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  16:	8883      	ldrh	r3, [r0, #4]
  18:	b29d      	uxth	r5, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:296
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  1a:	8b03      	ldrh	r3, [r0, #24]
  1c:	b29e      	uxth	r6, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:303
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  1e:	8827      	ldrh	r7, [r4, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:306
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  20:	f021 0102 	bic.w	r1, r1, #2	; 0x2
  24:	ea4f 4101 	mov.w	r1, r1, lsl #16
  28:	ea4f 4111 	mov.w	r1, r1, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:308
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  2c:	8863      	ldrh	r3, [r4, #2]
  2e:	8922      	ldrh	r2, [r4, #8]
  30:	ea43 0302 	orr.w	r3, r3, r2
  34:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:311
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  36:	ea43 0c01 	orr.w	ip, r3, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:313
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
  3a:	f642 4200 	movw	r2, #11264	; 0x2c00
  3e:	f2c4 0201 	movt	r2, #16385	; 0x4001
  42:	f243 4300 	movw	r3, #13312	; 0x3400
  46:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4a:	4298      	cmp	r0, r3
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	4290      	cmp	r0, r2
  54:	bf08      	it	eq
  56:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5a:	b9b3      	cbnz	r3, 8a <TIM_OC1Init+0x8a>
  5c:	f244 0200 	movw	r2, #16384	; 0x4000
  60:	f2c4 0201 	movt	r2, #16385	; 0x4001
  64:	f244 4300 	movw	r3, #17408	; 0x4400
  68:	f2c4 0301 	movt	r3, #16385	; 0x4001
  6c:	4298      	cmp	r0, r3
  6e:	bf14      	ite	ne
  70:	2300      	movne	r3, #0
  72:	2301      	moveq	r3, #1
  74:	4290      	cmp	r0, r2
  76:	bf08      	it	eq
  78:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  7c:	b92b      	cbnz	r3, 8a <TIM_OC1Init+0x8a>
  7e:	f644 0300 	movw	r3, #18432	; 0x4800
  82:	f2c4 0301 	movt	r3, #16385	; 0x4001
  86:	4298      	cmp	r0, r3
  88:	d11e      	bne.n	c8 <TIM_OC1Init+0xc8>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:322
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
  8a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  8e:	f2c0 0300 	movt	r3, #0	; 0x0
  92:	ea0c 0303 	and.w	r3, ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:324
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  96:	8962      	ldrh	r2, [r4, #10]
  98:	ea43 0302 	orr.w	r3, r3, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:327
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
  9c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
  a0:	f2c0 0200 	movt	r2, #0	; 0x0
  a4:	ea03 0202 	and.w	r2, r3, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  a8:	88a3      	ldrh	r3, [r4, #4]
  aa:	ea42 0c03 	orr.w	ip, r2, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:333
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
  ae:	f64f 41ff 	movw	r1, #64767	; 0xfcff
  b2:	f2c0 0100 	movt	r1, #0	; 0x0
  b6:	ea05 0101 	and.w	r1, r5, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:336
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  ba:	89e3      	ldrh	r3, [r4, #14]
  bc:	89a2      	ldrh	r2, [r4, #12]
  be:	ea43 0302 	orr.w	r3, r3, r2
  c2:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:338
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  c4:	ea43 0501 	orr.w	r5, r3, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:341
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  c8:	8085      	strh	r5, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:300
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
  ca:	f64f 738c 	movw	r3, #65420	; 0xff8c
  ce:	f2c0 0300 	movt	r3, #0	; 0x0
  d2:	ea06 0303 	and.w	r3, r6, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:303

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  d6:	ea43 0307 	orr.w	r3, r3, r7
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:344
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  da:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:347

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
  dc:	88e3      	ldrh	r3, [r4, #6]
  de:	8683      	strh	r3, [r0, #52]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:350
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  e0:	f8a0 c020 	strh.w	ip, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:351
}
  e4:	bcf0      	pop	{r4, r5, r6, r7}
  e6:	4770      	bx	lr
Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:363
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:372
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:375
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:377
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8882      	ldrh	r2, [r0, #4]
  16:	b294      	uxth	r4, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:380
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  18:	8b02      	ldrh	r2, [r0, #24]
  1a:	b295      	uxth	r5, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:387
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  1c:	880e      	ldrh	r6, [r1, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:390
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  1e:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  22:	ea4f 4303 	mov.w	r3, r3, lsl #16
  26:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:392
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  2a:	890a      	ldrh	r2, [r1, #8]
  2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  30:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:395
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  32:	884a      	ldrh	r2, [r1, #2]
  34:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  38:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:397
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  3c:	f642 4200 	movw	r2, #11264	; 0x2c00
  40:	f2c4 0201 	movt	r2, #16385	; 0x4001
  44:	f243 4300 	movw	r3, #13312	; 0x3400
  48:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4c:	4298      	cmp	r0, r3
  4e:	bf14      	ite	ne
  50:	2300      	movne	r3, #0
  52:	2301      	moveq	r3, #1
  54:	4290      	cmp	r0, r2
  56:	bf08      	it	eq
  58:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5c:	b30b      	cbz	r3, a2 <TIM_OC2Init+0xa2>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:405
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
  5e:	f64f 727f 	movw	r2, #65407	; 0xff7f
  62:	f2c0 0200 	movt	r2, #0	; 0x0
  66:	ea0c 0202 	and.w	r2, ip, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:407
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  6a:	894b      	ldrh	r3, [r1, #10]
  6c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:410
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
  70:	f64f 73bf 	movw	r3, #65471	; 0xffbf
  74:	f2c0 0300 	movt	r3, #0	; 0x0
  78:	ea02 0303 	and.w	r3, r2, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:412
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  7c:	888a      	ldrh	r2, [r1, #4]
  7e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  82:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:416
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
  86:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  8a:	f2c0 0300 	movt	r3, #0	; 0x0
  8e:	ea04 0303 	and.w	r3, r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:419
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  92:	898a      	ldrh	r2, [r1, #12]
  94:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  98:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:421
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  9a:	89ca      	ldrh	r2, [r1, #14]
  9c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  a0:	b29c      	uxth	r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:424
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  a2:	8084      	strh	r4, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:384
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  a4:	f648 43ff 	movw	r3, #36095	; 0x8cff
  a8:	f2c0 0300 	movt	r3, #0	; 0x0
  ac:	ea05 0303 	and.w	r3, r5, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:387
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  b0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  b4:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:427
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  b6:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:430

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  b8:	88cb      	ldrh	r3, [r1, #6]
  ba:	8703      	strh	r3, [r0, #56]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:433
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  bc:	f8a0 c020 	strh.w	ip, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:434
}
  c0:	bc70      	pop	{r4, r5, r6}
  c2:	4770      	bx	lr
Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:445
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:454
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
   2:	8c03      	ldrh	r3, [r0, #32]
   4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8:	ea4f 4303 	mov.w	r3, r3, lsl #16
   c:	ea4f 4313 	mov.w	r3, r3, lsr #16
  10:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:457
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  12:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:459
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  14:	8882      	ldrh	r2, [r0, #4]
  16:	b294      	uxth	r4, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  18:	8b82      	ldrh	r2, [r0, #28]
  1a:	b295      	uxth	r5, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:468
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  1c:	880e      	ldrh	r6, [r1, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:471
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  22:	ea4f 4303 	mov.w	r3, r3, lsl #16
  26:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:473
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  2a:	890a      	ldrh	r2, [r1, #8]
  2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  30:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:476
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  32:	884a      	ldrh	r2, [r1, #2]
  34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  38:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:478
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  3c:	f642 4200 	movw	r2, #11264	; 0x2c00
  40:	f2c4 0201 	movt	r2, #16385	; 0x4001
  44:	f243 4300 	movw	r3, #13312	; 0x3400
  48:	f2c4 0301 	movt	r3, #16385	; 0x4001
  4c:	4298      	cmp	r0, r3
  4e:	bf14      	ite	ne
  50:	2300      	movne	r3, #0
  52:	2301      	moveq	r3, #1
  54:	4290      	cmp	r0, r2
  56:	bf08      	it	eq
  58:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5c:	b30b      	cbz	r3, a2 <TIM_OC3Init+0xa2>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:486
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
  5e:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
  62:	f2c0 0200 	movt	r2, #0	; 0x0
  66:	ea0c 0202 	and.w	r2, ip, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:488
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  6a:	894b      	ldrh	r3, [r1, #10]
  6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
  70:	f64f 33ff 	movw	r3, #64511	; 0xfbff
  74:	f2c0 0300 	movt	r3, #0	; 0x0
  78:	ea02 0303 	and.w	r3, r2, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:493
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  7c:	888a      	ldrh	r2, [r1, #4]
  7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  82:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:496
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
  86:	f64c 73ff 	movw	r3, #53247	; 0xcfff
  8a:	f2c0 0300 	movt	r3, #0	; 0x0
  8e:	ea04 0303 	and.w	r3, r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:498
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  92:	898a      	ldrh	r2, [r1, #12]
  94:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  98:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:500
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  9a:	89ca      	ldrh	r2, [r1, #14]
  9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  a0:	b29c      	uxth	r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:503
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  a2:	8084      	strh	r4, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:466
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  a4:	f64f 738c 	movw	r3, #65420	; 0xff8c
  a8:	f2c0 0300 	movt	r3, #0	; 0x0
  ac:	ea05 0303 	and.w	r3, r5, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:468
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  b0:	ea43 0306 	orr.w	r3, r3, r6
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:506
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  b4:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:509

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  b6:	88cb      	ldrh	r3, [r1, #6]
  b8:	8783      	strh	r3, [r0, #60]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:512
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  ba:	f8a0 c020 	strh.w	ip, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:513
}
  be:	bc70      	pop	{r4, r5, r6}
  c0:	4770      	bx	lr
  c2:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:524
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:533
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
   4:	8c03      	ldrh	r3, [r0, #32]
   6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a:	ea4f 4303 	mov.w	r3, r3, lsl #16
   e:	ea4f 4313 	mov.w	r3, r3, lsr #16
  12:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:536
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  14:	8c03      	ldrh	r3, [r0, #32]
  16:	fa1f f883 	uxth.w	r8, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  1a:	8883      	ldrh	r3, [r0, #4]
  1c:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  20:	8b83      	ldrh	r3, [r0, #28]
  22:	b29c      	uxth	r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:548
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  24:	880d      	ldrh	r5, [r1, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:553
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  26:	890e      	ldrh	r6, [r1, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:556
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  28:	884f      	ldrh	r7, [r1, #2]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:558
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  2a:	f642 4200 	movw	r2, #11264	; 0x2c00
  2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
  32:	f243 4300 	movw	r3, #13312	; 0x3400
  36:	f2c4 0301 	movt	r3, #16385	; 0x4001
  3a:	4298      	cmp	r0, r3
  3c:	bf14      	ite	ne
  3e:	2300      	movne	r3, #0
  40:	2301      	moveq	r3, #1
  42:	4290      	cmp	r0, r2
  44:	bf08      	it	eq
  46:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  4a:	b153      	cbz	r3, 62 <TIM_OC4Init+0x62>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:562
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
  4c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
  50:	f2c0 0300 	movt	r3, #0	; 0x0
  54:	ea0c 0303 	and.w	r3, ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:564
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  58:	898a      	ldrh	r2, [r1, #12]
  5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
  5e:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:567
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  62:	f8a0 c004 	strh.w	ip, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:545
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  66:	f648 43ff 	movw	r3, #36095	; 0x8cff
  6a:	f2c0 0300 	movt	r3, #0	; 0x0
  6e:	ea04 0303 	and.w	r3, r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:548
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  76:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:570
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  78:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:573

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  7a:	88cb      	ldrh	r3, [r1, #6]
  7c:	f8a0 3040 	strh.w	r3, [r0, #64]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:551
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  80:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  84:	f2c0 0300 	movt	r3, #0	; 0x0
  88:	ea08 0303 	and.w	r3, r8, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:553
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  8c:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  90:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:556
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  92:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  96:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:576

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  98:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:577
}
  9a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  9e:	4770      	bx	lr
Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:724
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   0:	884b      	ldrh	r3, [r1, #2]
   2:	880a      	ldrh	r2, [r1, #0]
   4:	ea43 0302 	orr.w	r3, r3, r2
   8:	888a      	ldrh	r2, [r1, #4]
   a:	ea43 0302 	orr.w	r3, r3, r2
   e:	88ca      	ldrh	r2, [r1, #6]
  10:	ea43 0302 	orr.w	r3, r3, r2
  14:	890a      	ldrh	r2, [r1, #8]
  16:	ea43 0302 	orr.w	r3, r3, r2
  1a:	894a      	ldrh	r2, [r1, #10]
  1c:	ea43 0302 	orr.w	r3, r3, r2
  20:	898a      	ldrh	r2, [r1, #12]
  22:	ea43 0302 	orr.w	r3, r3, r2
  26:	b29b      	uxth	r3, r3
  28:	f8a0 3044 	strh.w	r3, [r0, #68]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:728
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
  2c:	4770      	bx	lr
  2e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:739
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
   0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:740
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
   6:	f04f 0300 	mov.w	r3, #0	; 0x0
   a:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:741
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
   c:	80c3      	strh	r3, [r0, #6]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:742
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
   e:	8043      	strh	r3, [r0, #2]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:743
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
  10:	7203      	strb	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:744
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:755
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   0:	f04f 0300 	mov.w	r3, #0	; 0x0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:757
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:759
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
   c:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:760
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
   e:	8143      	strh	r3, [r0, #10]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:761
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
  10:	8183      	strh	r3, [r0, #12]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:762
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  12:	81c3      	strh	r3, [r0, #14]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:763
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:774
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   0:	f04f 0300 	mov.w	r3, #0	; 0x0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:775
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:776
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   8:	f04f 0201 	mov.w	r2, #1	; 0x1
   c:	8082      	strh	r2, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:777
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
   e:	80c3      	strh	r3, [r0, #6]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:778
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
  10:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:779
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:790
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   0:	f04f 0300 	mov.w	r3, #0	; 0x0
   4:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:791
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
   6:	8043      	strh	r3, [r0, #2]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:792
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
   8:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:793
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
   a:	80c3      	strh	r3, [r0, #6]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:794
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
   c:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:795
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
   e:	8143      	strh	r3, [r0, #10]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:796
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
  10:	8183      	strh	r3, [r0, #12]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:797
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:812
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b129      	cbz	r1, e <TIM_Cmd+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:815
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   a:	8003      	strh	r3, [r0, #0]
   c:	e007      	b.n	1e <TIM_Cmd+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:820
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:822
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:836
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b149      	cbz	r1, 16 <TIM_CtrlPWMOutputs+0x16>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:839
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
   2:	f8b0 3044 	ldrh.w	r3, [r0, #68]
   6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   e:	b29b      	uxth	r3, r3
  10:	f8a0 3044 	strh.w	r3, [r0, #68]
  14:	e007      	b.n	26 <TIM_CtrlPWMOutputs+0x26>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:844
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  16:	f8b0 3044 	ldrh.w	r3, [r0, #68]
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	f8a0 3044 	strh.w	r3, [r0, #68]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:846
  }  
}
  26:	4770      	bx	lr
Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:879
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b12a      	cbz	r2, e <TIM_ITConfig+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:882
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	ea41 0303 	orr.w	r3, r1, r3
   a:	8183      	strh	r3, [r0, #12]
   c:	e006      	b.n	1c <TIM_ITConfig+0x1c>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:887
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
   e:	8983      	ldrh	r3, [r0, #12]
  10:	b29b      	uxth	r3, r3
  12:	ea6f 0201 	mvn.w	r2, r1
  16:	ea03 0302 	and.w	r3, r3, r2
  1a:	8183      	strh	r3, [r0, #12]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:889
  }
}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:916
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   0:	8281      	strh	r1, [r0, #20]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:917
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:944
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
   0:	ea42 0201 	orr.w	r2, r2, r1
   4:	f8a0 2048 	strh.w	r2, [r0, #72]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:945
}
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:971
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b12a      	cbz	r2, e <TIM_DMACmd+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:974
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	ea41 0303 	orr.w	r3, r1, r3
   a:	8183      	strh	r3, [r0, #12]
   c:	e006      	b.n	1c <TIM_DMACmd+0x1c>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:979
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
   e:	8983      	ldrh	r3, [r0, #12]
  10:	b29b      	uxth	r3, r3
  12:	ea6f 0201 	mvn.w	r2, r1
  16:	ea03 0302 	and.w	r3, r3, r2
  1a:	8183      	strh	r3, [r0, #12]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:981
  }
}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:994
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7	; 0x7
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:995
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1150
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
   0:	b410      	push	{r4}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1157
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1161
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   4:	b2e4      	uxtb	r4, r4
   6:	ea41 0104 	orr.w	r1, r1, r4
   a:	ea41 0102 	orr.w	r1, r1, r2
   e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  12:	b289      	uxth	r1, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1163
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  14:	8101      	strh	r1, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1164
}
  16:	bc10      	pop	{r4}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1119
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1126
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode2Config>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1128
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  10:	8123      	strh	r3, [r4, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1129
}
  12:	bd10      	pop	{r4, pc}
Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1077
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1085
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode1Config>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1088
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   8:	8923      	ldrh	r3, [r4, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1092
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
   a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
   e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  12:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1095
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  tmpsmcr |= TIM_TS_ETRF;
  16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1097
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  1a:	8123      	strh	r3, [r4, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1098
}
  1c:	bd10      	pop	{r4, pc}
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1182
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
   0:	8501      	strh	r1, [r0, #40]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1184
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
   2:	8282      	strh	r2, [r0, #20]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1185
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1205
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
   0:	8803      	ldrh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1207
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1209
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1211
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
  12:	8001      	strh	r1, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1212
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1236
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   0:	8903      	ldrh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1238
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1240
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1242
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  12:	8101      	strh	r1, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1243
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1009
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1014
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   4:	f7ff fffe 	bl	0 <TIM_ITRxExternalClockConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1016
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  10:	8123      	strh	r3, [r4, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1017
}
  12:	bd10      	pop	{r4, pc}
Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1278
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1281
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   4:	8b05      	ldrh	r5, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1284
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   6:	8c06      	ldrh	r6, [r0, #32]
   8:	b2b6      	uxth	r6, r6
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1287
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
   a:	f024 0407 	bic.w	r4, r4, #7	; 0x7
   e:	ea4f 4404 	mov.w	r4, r4, lsl #16
  12:	ea4f 4414 	mov.w	r4, r4, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1288
  tmpsmcr |= TIM_EncoderMode;
  16:	ea41 0104 	orr.w	r1, r1, r4
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1291
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  1a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  1e:	f025 0503 	bic.w	r5, r5, #3	; 0x3
  22:	ea4f 4505 	mov.w	r5, r5, lsl #16
  26:	ea4f 4515 	mov.w	r5, r5, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1292
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  2a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  2e:	f045 0501 	orr.w	r5, r5, #1	; 0x1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1296
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  32:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  36:	ea42 0206 	orr.w	r2, r2, r6
  3a:	b292      	uxth	r2, r2
  3c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  40:	b292      	uxth	r2, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1299
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  42:	8101      	strh	r1, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1301
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  44:	8305      	strh	r5, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1303
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  46:	8402      	strh	r2, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1304
}
  48:	bc70      	pop	{r4, r5, r6}
  4a:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1316
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1323
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1325
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1327
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8301      	strh	r1, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1328
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1340
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1347
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1349
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1351
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1352
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1364
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1371
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1373
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1375
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8381      	strh	r1, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1376
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1388
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1395
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1397
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1399
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1400
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1410
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b129      	cbz	r1, e <TIM_ARRPreloadConfig+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1417
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	8003      	strh	r3, [r0, #0]
   c:	e007      	b.n	1e <TIM_ARRPreloadConfig+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1422
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1424
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1434
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b129      	cbz	r1, e <TIM_SelectCOM+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1441
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4	; 0x4
   a:	8083      	strh	r3, [r0, #4]
   c:	e007      	b.n	1e <TIM_SelectCOM+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1446
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0304 	bic.w	r3, r3, #4	; 0x4
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1448
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1459
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b129      	cbz	r1, e <TIM_SelectCCDMA+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1466
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   a:	8083      	strh	r3, [r0, #4]
   c:	e007      	b.n	1e <TIM_SelectCCDMA+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1471
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1473
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1484
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
   0:	b129      	cbz	r1, e <TIM_CCPreloadControl+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1491
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   a:	8083      	strh	r3, [r0, #4]
   c:	e007      	b.n	1e <TIM_CCPreloadControl+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1496
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1498
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1510
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1517
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1519
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1521
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8301      	strh	r1, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1522
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1535
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1542
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1544
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1546
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1547
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1559
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1566
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1568
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1570
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8381      	strh	r1, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1571
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1583
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1590
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1592
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1594
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1595
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1607
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1615
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1617
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1619
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  12:	8301      	strh	r1, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1620
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1633
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1641
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1643
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1645
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  14:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1646
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1658
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1666
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
   2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1668
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1670
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  12:	8381      	strh	r1, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1671
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1683
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1691
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1693
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1695
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  14:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1696
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1708
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1717
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1719
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1721
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  12:	8301      	strh	r1, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1722
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1734
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b03      	ldrh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1741
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
   2:	ea4f 4343 	mov.w	r3, r3, lsl #17
   6:	ea4f 4353 	mov.w	r3, r3, lsr #17
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1743
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1745
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1746
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1763
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1765
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1767
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1769
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  12:	8381      	strh	r1, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1770
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1782
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	8b83      	ldrh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1789
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
   2:	ea4f 4343 	mov.w	r3, r3, lsl #17
   6:	ea4f 4353 	mov.w	r3, r3, lsr #17
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1791
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1793
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1794
}
  12:	4770      	bx	lr
Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1806
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1813
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
   2:	f023 0302 	bic.w	r3, r3, #2	; 0x2
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1814
  tmpccer |= TIM_OCPolarity;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1816
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  12:	8401      	strh	r1, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1817
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1829
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1837
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1838
  tmpccer |= TIM_OCNPolarity;
   e:	ea41 0103 	orr.w	r1, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1840
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  12:	8401      	strh	r1, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1841
}
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1853
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1860
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
   2:	f023 0320 	bic.w	r3, r3, #32	; 0x20
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1861
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
   e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1863
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1864
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1876
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1884
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1885
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
   e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1887
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1888
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1900
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1907
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
   2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1908
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1910
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1911
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1923
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1932
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1933
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
   e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1935
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1936
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1948
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	8c03      	ldrh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1955
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
   2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1956
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
   e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  12:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1958
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1959
}
  16:	4770      	bx	lr
Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1975
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   0:	b410      	push	{r4}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1986
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	b2a4      	uxth	r4, r4
   6:	f04f 0301 	mov.w	r3, #1	; 0x1
   a:	fa03 f301 	lsl.w	r3, r3, r1
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	ea04 0403 	and.w	r4, r4, r3
  16:	8404      	strh	r4, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1989

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
  18:	8c03      	ldrh	r3, [r0, #32]
  1a:	fa02 f201 	lsl.w	r2, r2, r1
  1e:	ea42 0203 	orr.w	r2, r2, r3
  22:	b292      	uxth	r2, r2
  24:	8402      	strh	r2, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990
}
  26:	bc10      	pop	{r4}
  28:	4770      	bx	lr
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2005
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   0:	b410      	push	{r4}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2016
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	b2a4      	uxth	r4, r4
   6:	f04f 0304 	mov.w	r3, #4	; 0x4
   a:	fa03 f301 	lsl.w	r3, r3, r1
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	ea04 0403 	and.w	r4, r4, r3
  16:	8404      	strh	r4, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2019

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
  18:	8c03      	ldrh	r3, [r0, #32]
  1a:	fa02 f201 	lsl.w	r2, r2, r1
  1e:	ea42 0203 	orr.w	r2, r2, r3
  22:	b292      	uxth	r2, r2
  24:	8402      	strh	r2, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2020
}
  26:	bc10      	pop	{r4}
  28:	4770      	bx	lr
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2046
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
   0:	b410      	push	{r4}
   2:	4614      	mov	r4, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2056
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
   4:	f100 0c18 	add.w	ip, r0, #24	; 0x18
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2061

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
   8:	8c02      	ldrh	r2, [r0, #32]
   a:	b292      	uxth	r2, r2
   c:	f04f 0301 	mov.w	r3, #1	; 0x1
  10:	fa03 f301 	lsl.w	r3, r3, r1
  14:	ea6f 0303 	mvn.w	r3, r3
  18:	ea02 0203 	and.w	r2, r2, r3
  1c:	8402      	strh	r2, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2063

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  1e:	2908      	cmp	r1, #8
  20:	bf14      	ite	ne
  22:	2300      	movne	r3, #0
  24:	2301      	moveq	r3, #1
  26:	2900      	cmp	r1, #0
  28:	bf08      	it	eq
  2a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  2e:	b153      	cbz	r3, 46 <TIM_SelectOCxM+0x46>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2068
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
  30:	eb0c 0351 	add.w	r3, ip, r1, lsr #1
  34:	681a      	ldr	r2, [r3, #0]
  36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  3a:	601a      	str	r2, [r3, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2071
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  3c:	681a      	ldr	r2, [r3, #0]
  3e:	ea42 0204 	orr.w	r2, r2, r4
  42:	601a      	str	r2, [r3, #0]
  44:	e00f      	b.n	66 <TIM_SelectOCxM+0x66>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2078
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
  46:	f1a1 0204 	sub.w	r2, r1, #4	; 0x4
  4a:	b292      	uxth	r2, r2
  4c:	eb0c 0252 	add.w	r2, ip, r2, lsr #1
  50:	6813      	ldr	r3, [r2, #0]
  52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  56:	6013      	str	r3, [r2, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2081
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  58:	6811      	ldr	r1, [r2, #0]
  5a:	ea4f 2304 	mov.w	r3, r4, lsl #8
  5e:	b29b      	uxth	r3, r3
  60:	ea41 0103 	orr.w	r1, r1, r3
  64:	6011      	str	r1, [r2, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2083
  }
}
  66:	bc10      	pop	{r4}
  68:	4770      	bx	lr
  6a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2093
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b129      	cbz	r1, e <TIM_UpdateDisableConfig+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2100
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   a:	8003      	strh	r3, [r0, #0]
   c:	e007      	b.n	1e <TIM_UpdateDisableConfig+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2105
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2107
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2121
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
   0:	b129      	cbz	r1, e <TIM_UpdateRequestConfig+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2128
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4	; 0x4
   a:	8003      	strh	r3, [r0, #0]
   c:	e007      	b.n	1e <TIM_UpdateRequestConfig+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2133
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
   e:	8803      	ldrh	r3, [r0, #0]
  10:	f023 0304 	bic.w	r3, r3, #4	; 0x4
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2135
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2145
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b129      	cbz	r1, e <TIM_SelectHallSensor+0xe>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2152
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	8083      	strh	r3, [r0, #4]
   c:	e007      	b.n	1e <TIM_SelectHallSensor+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2157
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
   e:	8883      	ldrh	r3, [r0, #4]
  10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  14:	ea4f 4303 	mov.w	r3, r3, lsl #16
  18:	ea4f 4313 	mov.w	r3, r3, lsr #16
  1c:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2159
  }
}
  1e:	4770      	bx	lr
Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2171
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2178
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8001      	strh	r1, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2179
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2203
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
   0:	8883      	ldrh	r3, [r0, #4]
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8083      	strh	r3, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2210
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
  10:	8883      	ldrh	r3, [r0, #4]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8081      	strh	r1, [r0, #4]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2211
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2226
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7	; 0x7
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2233
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
  10:	8903      	ldrh	r3, [r0, #8]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8101      	strh	r1, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2234
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2247
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8103      	strh	r3, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2255
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
  10:	8903      	ldrh	r3, [r0, #8]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8101      	strh	r1, [r0, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2256
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2269
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
   0:	8481      	strh	r1, [r0, #36]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2270
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2279
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
   0:	8581      	strh	r1, [r0, #44]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2284
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2293
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
   0:	8681      	strh	r1, [r0, #52]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2298
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2307
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
   0:	8701      	strh	r1, [r0, #56]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2312
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2321
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
   0:	8781      	strh	r1, [r0, #60]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2326
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
}
   2:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2335
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
   0:	f8a0 1040 	strh.w	r1, [r0, #64]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2340
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f023 030c 	bic.w	r3, r3, #12	; 0xc
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2361
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  10:	8b03      	ldrh	r3, [r0, #24]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8301      	strh	r1, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2362
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2376
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2383
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
  10:	8b03      	ldrh	r3, [r0, #24]
  12:	b29b      	uxth	r3, r3
  14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  18:	b29b      	uxth	r3, r3
  1a:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2384
}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2398
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f023 030c 	bic.w	r3, r3, #12	; 0xc
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2405
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
  10:	8b83      	ldrh	r3, [r0, #28]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8381      	strh	r1, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2406
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2420
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2427
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
  10:	8b83      	ldrh	r3, [r0, #28]
  12:	b29b      	uxth	r3, r3
  14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  18:	b29b      	uxth	r3, r3
  1a:	8383      	strh	r3, [r0, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2428
}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2442
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   6:	ea4f 4303 	mov.w	r3, r3, lsl #16
   a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   e:	8003      	strh	r3, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2449
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	b29b      	uxth	r3, r3
  14:	ea41 0103 	orr.w	r1, r1, r3
  18:	8001      	strh	r1, [r0, #0]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2450
}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2458
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
   0:	8e80      	ldrh	r0, [r0, #52]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2463
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2471
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
   0:	8f00      	ldrh	r0, [r0, #56]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2476
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2484
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
   0:	8f80      	ldrh	r0, [r0, #60]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2489
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2497
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
   0:	f8b0 0040 	ldrh.w	r0, [r0, #64]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2502
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
}
   4:	b280      	uxth	r0, r0
   6:	4770      	bx	lr
Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2510
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
   0:	8c80      	ldrh	r0, [r0, #36]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2515
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2523
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
   0:	8d00      	ldrh	r0, [r0, #40]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2528
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2557
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
   0:	8a03      	ldrh	r3, [r0, #16]
   2:	4219      	tst	r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2572
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr
Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2601
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
   0:	ea6f 0101 	mvn.w	r1, r1
   4:	b289      	uxth	r1, r1
   6:	8201      	strh	r1, [r0, #16]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2608
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
}
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2633
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	8a03      	ldrh	r3, [r0, #16]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2642
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
   2:	8982      	ldrh	r2, [r0, #12]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2643
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
   4:	4219      	tst	r1, r3
   6:	bf0c      	ite	eq
   8:	2000      	moveq	r0, #0
   a:	2001      	movne	r0, #1
   c:	4211      	tst	r1, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2652
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   e:	bf0c      	ite	eq
  10:	2000      	moveq	r0, #0
  12:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  16:	4770      	bx	lr
Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2677
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	ea6f 0101 	mvn.w	r1, r1
   4:	b289      	uxth	r1, r1
   6:	8201      	strh	r1, [r0, #16]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2683
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
}
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TI1_Config:

00000000 <TI1_Config>:
TI1_Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2703
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b470      	push	{r4, r5, r6}
   2:	4615      	mov	r5, r2
   4:	461e      	mov	r6, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2706
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
   6:	8c03      	ldrh	r3, [r0, #32]
   8:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  10:	ea4f 4313 	mov.w	r3, r3, lsr #16
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  tmpccmr1 = TIMx->CCMR1;
  16:	8b03      	ldrh	r3, [r0, #24]
  18:	b29c      	uxth	r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  tmpccer = TIMx->CCER;
  1a:	8c03      	ldrh	r3, [r0, #32]
  1c:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2713
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  20:	f642 4200 	movw	r2, #11264	; 0x2c00
  24:	f2c4 0201 	movt	r2, #16385	; 0x4001
  28:	f243 4300 	movw	r3, #13312	; 0x3400
  2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  30:	4298      	cmp	r0, r3
  32:	bf14      	ite	ne
  34:	2300      	movne	r3, #0
  36:	2301      	moveq	r3, #1
  38:	4290      	cmp	r0, r2
  3a:	bf08      	it	eq
  3c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  40:	b9f3      	cbnz	r3, 80 <TI1_Config+0x80>
  42:	f240 4300 	movw	r3, #1024	; 0x400
  46:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4a:	4298      	cmp	r0, r3
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  56:	bf08      	it	eq
  58:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5c:	b983      	cbnz	r3, 80 <TI1_Config+0x80>
  5e:	f640 0200 	movw	r2, #2048	; 0x800
  62:	f2c4 0200 	movt	r2, #16384	; 0x4000
  66:	f640 4300 	movw	r3, #3072	; 0xc00
  6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  6e:	4298      	cmp	r0, r3
  70:	bf14      	ite	ne
  72:	2300      	movne	r3, #0
  74:	2301      	moveq	r3, #1
  76:	4290      	cmp	r0, r2
  78:	bf08      	it	eq
  7a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  7e:	b13b      	cbz	r3, 90 <TI1_Config+0x90>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2718
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  80:	f02c 0302 	bic.w	r3, ip, #2	; 0x2
  84:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  88:	b29b      	uxth	r3, r3
  8a:	ea43 0101 	orr.w	r1, r3, r1
  8e:	e006      	b.n	9e <TI1_Config+0x9e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2724
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  90:	f02c 030a 	bic.w	r3, ip, #10	; 0xa
  94:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  98:	b29b      	uxth	r3, r3
  9a:	ea43 0101 	orr.w	r1, r3, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2711
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  9e:	f024 03f3 	bic.w	r3, r4, #243	; 0xf3
  a2:	ea45 0303 	orr.w	r3, r5, r3
  a6:	b29b      	uxth	r3, r3
  a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  ac:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2728
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  ae:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2729
  TIMx->CCER = tmpccer;
  b0:	8401      	strh	r1, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2730
}
  b2:	bc70      	pop	{r4, r5, r6}
  b4:	4770      	bx	lr
  b6:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TI2_Config:

00000000 <TI2_Config>:
TI2_Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2750
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b470      	push	{r4, r5, r6}
   2:	4615      	mov	r5, r2
   4:	461e      	mov	r6, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2753
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
   6:	8c03      	ldrh	r3, [r0, #32]
   8:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  10:	ea4f 4313 	mov.w	r3, r3, lsr #16
  14:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2754
  tmpccmr1 = TIMx->CCMR1;
  16:	8b03      	ldrh	r3, [r0, #24]
  18:	b29c      	uxth	r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2755
  tmpccer = TIMx->CCER;
  1a:	8c03      	ldrh	r3, [r0, #32]
  1c:	fa1f fc83 	uxth.w	ip, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2762
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  20:	f642 4200 	movw	r2, #11264	; 0x2c00
  24:	f2c4 0201 	movt	r2, #16385	; 0x4001
  28:	f243 4300 	movw	r3, #13312	; 0x3400
  2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  30:	4298      	cmp	r0, r3
  32:	bf14      	ite	ne
  34:	2300      	movne	r3, #0
  36:	2301      	moveq	r3, #1
  38:	4290      	cmp	r0, r2
  3a:	bf08      	it	eq
  3c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  40:	b9f3      	cbnz	r3, 80 <TI2_Config+0x80>
  42:	f240 4300 	movw	r3, #1024	; 0x400
  46:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4a:	4298      	cmp	r0, r3
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  56:	bf08      	it	eq
  58:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5c:	b983      	cbnz	r3, 80 <TI2_Config+0x80>
  5e:	f640 0200 	movw	r2, #2048	; 0x800
  62:	f2c4 0200 	movt	r2, #16384	; 0x4000
  66:	f640 4300 	movw	r3, #3072	; 0xc00
  6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  6e:	4298      	cmp	r0, r3
  70:	bf14      	ite	ne
  72:	2300      	movne	r3, #0
  74:	2301      	moveq	r3, #1
  76:	4290      	cmp	r0, r2
  78:	bf08      	it	eq
  7a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  7e:	b143      	cbz	r3, 92 <TI2_Config+0x92>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2767
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
  80:	f02c 0320 	bic.w	r3, ip, #32	; 0x20
  84:	f043 0310 	orr.w	r3, r3, #16	; 0x10
  88:	b29b      	uxth	r3, r3
  8a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  8e:	b299      	uxth	r1, r3
  90:	e006      	b.n	a0 <TI2_Config+0xa0>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2773
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
  92:	f02c 03a0 	bic.w	r3, ip, #160	; 0xa0
  96:	f043 0310 	orr.w	r3, r3, #16	; 0x10
  9a:	b29b      	uxth	r3, r3
  9c:	ea43 0101 	orr.w	r1, r3, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2758
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  a0:	f640 43ff 	movw	r3, #3327	; 0xcff
  a4:	f2c0 0300 	movt	r3, #0	; 0x0
  a8:	ea04 0303 	and.w	r3, r4, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2759
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  b0:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2760
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  b2:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  b6:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  b8:	8303      	strh	r3, [r0, #24]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2778
  TIMx->CCER = tmpccer;
  ba:	8401      	strh	r1, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2779
}
  bc:	bc70      	pop	{r4, r5, r6}
  be:	4770      	bx	lr
Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1037
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	4611      	mov	r1, r2
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1044
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   8:	2d60      	cmp	r5, #96
   a:	d104      	bne.n	16 <TIM_TIxExternalClockConfig+0x16>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1046
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
   c:	f04f 0201 	mov.w	r2, #1	; 0x1
  10:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
  14:	e003      	b.n	1e <TIM_TIxExternalClockConfig+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1050
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  16:	f04f 0201 	mov.w	r2, #1	; 0x1
  1a:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1053
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  1e:	4620      	mov	r0, r4
  20:	4629      	mov	r1, r5
  22:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1055
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  26:	8923      	ldrh	r3, [r4, #8]
  28:	b29b      	uxth	r3, r3
  2a:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  2e:	8123      	strh	r3, [r4, #8]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1056
}
  30:	bd70      	pop	{r4, r5, r6, pc}
  32:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:655
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
   6:	460c      	mov	r4, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:661
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   8:	8849      	ldrh	r1, [r1, #2]
   a:	2900      	cmp	r1, #0
   c:	bf0c      	ite	eq
   e:	2702      	moveq	r7, #2
  10:	2700      	movne	r7, #0
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:670
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  12:	88a2      	ldrh	r2, [r4, #4]
  14:	2a01      	cmp	r2, #1
  16:	bf0c      	ite	eq
  18:	2602      	moveq	r6, #2
  1a:	2601      	movne	r6, #1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:678
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  1c:	8823      	ldrh	r3, [r4, #0]
  1e:	b98b      	cbnz	r3, 44 <TIM_PWMIConfig+0x44>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:681
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  20:	8923      	ldrh	r3, [r4, #8]
  22:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:684
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  26:	4628      	mov	r0, r5
  28:	88e1      	ldrh	r1, [r4, #6]
  2a:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:686
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  2e:	4628      	mov	r0, r5
  30:	4639      	mov	r1, r7
  32:	4632      	mov	r2, r6
  34:	8923      	ldrh	r3, [r4, #8]
  36:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:688
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  3a:	4628      	mov	r0, r5
  3c:	88e1      	ldrh	r1, [r4, #6]
  3e:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
  42:	e010      	b.n	66 <TIM_PWMIConfig+0x66>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:693
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  44:	8923      	ldrh	r3, [r4, #8]
  46:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:696
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  4a:	4628      	mov	r0, r5
  4c:	88e1      	ldrh	r1, [r4, #6]
  4e:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:698
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  52:	4628      	mov	r0, r5
  54:	4639      	mov	r1, r7
  56:	4632      	mov	r2, r6
  58:	8923      	ldrh	r3, [r4, #8]
  5a:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:700
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  5e:	4628      	mov	r0, r5
  60:	88e1      	ldrh	r1, [r4, #6]
  62:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:702
  }
}
  66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  6a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:588
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:604
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   6:	880b      	ldrh	r3, [r1, #0]
   8:	b94b      	cbnz	r3, 1e <TIM_ICInit+0x1e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:608
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
   a:	8849      	ldrh	r1, [r1, #2]
   c:	88aa      	ldrh	r2, [r5, #4]
   e:	892b      	ldrh	r3, [r5, #8]
  10:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:612
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  14:	4620      	mov	r0, r4
  16:	88e9      	ldrh	r1, [r5, #6]
  18:	f7ff fffe 	bl	0 <TIM_ICInit>
  1c:	e0d3      	b.n	1c6 <TIM_ICInit+0x1c6>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:614
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  1e:	2b04      	cmp	r3, #4
  20:	d109      	bne.n	36 <TIM_ICInit+0x36>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:618
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  22:	8849      	ldrh	r1, [r1, #2]
  24:	88aa      	ldrh	r2, [r5, #4]
  26:	892b      	ldrh	r3, [r5, #8]
  28:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:622
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  2c:	4620      	mov	r0, r4
  2e:	88e9      	ldrh	r1, [r5, #6]
  30:	f7ff fffe 	bl	0 <TIM_ICInit>
  34:	e0c7      	b.n	1c6 <TIM_ICInit+0x1c6>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:624
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  36:	2b08      	cmp	r3, #8
  38:	d160      	bne.n	fc <TIM_ICInit+0xfc>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:628
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  3a:	884e      	ldrh	r6, [r1, #2]
  3c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  40:	f8b1 e008 	ldrh.w	lr, [r1, #8]
TI3_Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2802
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  44:	8c03      	ldrh	r3, [r0, #32]
  46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4a:	ea4f 4303 	mov.w	r3, r3, lsl #16
  4e:	ea4f 4313 	mov.w	r3, r3, lsr #16
  52:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2803
  tmpccmr2 = TIMx->CCMR2;
  54:	8b83      	ldrh	r3, [r0, #28]
  56:	b298      	uxth	r0, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2804
  tmpccer = TIMx->CCER;
  58:	8c23      	ldrh	r3, [r4, #32]
  5a:	b299      	uxth	r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2810
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  5c:	f642 4200 	movw	r2, #11264	; 0x2c00
  60:	f2c4 0201 	movt	r2, #16385	; 0x4001
  64:	f243 4300 	movw	r3, #13312	; 0x3400
  68:	f2c4 0301 	movt	r3, #16385	; 0x4001
  6c:	429c      	cmp	r4, r3
  6e:	bf14      	ite	ne
  70:	2300      	movne	r3, #0
  72:	2301      	moveq	r3, #1
  74:	4294      	cmp	r4, r2
  76:	bf08      	it	eq
  78:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  7c:	b9f3      	cbnz	r3, bc <TIM_ICInit+0xbc>
  7e:	f240 4300 	movw	r3, #1024	; 0x400
  82:	f2c4 0300 	movt	r3, #16384	; 0x4000
  86:	429c      	cmp	r4, r3
  88:	bf14      	ite	ne
  8a:	2300      	movne	r3, #0
  8c:	2301      	moveq	r3, #1
  8e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  92:	bf08      	it	eq
  94:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  98:	b983      	cbnz	r3, bc <TIM_ICInit+0xbc>
  9a:	f640 0200 	movw	r2, #2048	; 0x800
  9e:	f2c4 0200 	movt	r2, #16384	; 0x4000
  a2:	f640 4300 	movw	r3, #3072	; 0xc00
  a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  aa:	429c      	cmp	r4, r3
  ac:	bf14      	ite	ne
  ae:	2300      	movne	r3, #0
  b0:	2301      	moveq	r3, #1
  b2:	4294      	cmp	r4, r2
  b4:	bf08      	it	eq
  b6:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  ba:	b13b      	cbz	r3, cc <TIM_ICInit+0xcc>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2815
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
  bc:	f421 7300 	bic.w	r3, r1, #512	; 0x200
  c0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  c4:	b29b      	uxth	r3, r3
  c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
  ca:	e009      	b.n	e0 <TIM_ICInit+0xe0>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2820
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
  cc:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
  d0:	f2c0 0300 	movt	r3, #0	; 0x0
  d4:	ea01 0303 	and.w	r3, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2821
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  d8:	ea46 0303 	orr.w	r3, r6, r3
  dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2808
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  e0:	f020 03f3 	bic.w	r3, r0, #243	; 0xf3
  e4:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  e8:	b29b      	uxth	r3, r3
  ea:	ea43 030c 	orr.w	r3, r3, ip
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2825
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  ee:	83a3      	strh	r3, [r4, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2826
  TIMx->CCER = tmpccer;
  f0:	8422      	strh	r2, [r4, #32]
TIM_ICInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:632
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  f2:	4620      	mov	r0, r4
  f4:	88e9      	ldrh	r1, [r5, #6]
  f6:	f7ff fffe 	bl	0 <TIM_ICInit>
  fa:	e064      	b.n	1c6 <TIM_ICInit+0x1c6>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:638
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  fc:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 100:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 104:	890e      	ldrh	r6, [r1, #8]
TI4_Config():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2851
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 106:	8c03      	ldrh	r3, [r0, #32]
 108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 10c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 110:	ea4f 4313 	mov.w	r3, r3, lsr #16
 114:	8403      	strh	r3, [r0, #32]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2852
  tmpccmr2 = TIMx->CCMR2;
 116:	8b83      	ldrh	r3, [r0, #28]
 118:	b298      	uxth	r0, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2853
  tmpccer = TIMx->CCER;
 11a:	8c23      	ldrh	r3, [r4, #32]
 11c:	b299      	uxth	r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2860
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 11e:	f642 4200 	movw	r2, #11264	; 0x2c00
 122:	f2c4 0201 	movt	r2, #16385	; 0x4001
 126:	f243 4300 	movw	r3, #13312	; 0x3400
 12a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 12e:	429c      	cmp	r4, r3
 130:	bf14      	ite	ne
 132:	2300      	movne	r3, #0
 134:	2301      	moveq	r3, #1
 136:	4294      	cmp	r4, r2
 138:	bf08      	it	eq
 13a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 13e:	b9f3      	cbnz	r3, 17e <TIM_ICInit+0x17e>
 140:	f240 4300 	movw	r3, #1024	; 0x400
 144:	f2c4 0300 	movt	r3, #16384	; 0x4000
 148:	429c      	cmp	r4, r3
 14a:	bf14      	ite	ne
 14c:	2300      	movne	r3, #0
 14e:	2301      	moveq	r3, #1
 150:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 154:	bf08      	it	eq
 156:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 15a:	b983      	cbnz	r3, 17e <TIM_ICInit+0x17e>
 15c:	f640 0200 	movw	r2, #2048	; 0x800
 160:	f2c4 0200 	movt	r2, #16384	; 0x4000
 164:	f640 4300 	movw	r3, #3072	; 0xc00
 168:	f2c4 0300 	movt	r3, #16384	; 0x4000
 16c:	429c      	cmp	r4, r3
 16e:	bf14      	ite	ne
 170:	2300      	movne	r3, #0
 172:	2301      	moveq	r3, #1
 174:	4294      	cmp	r4, r2
 176:	bf08      	it	eq
 178:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 17c:	b13b      	cbz	r3, 18e <TIM_ICInit+0x18e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2865
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 17e:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
 182:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
 186:	b29b      	uxth	r3, r3
 188:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 18c:	e009      	b.n	1a2 <TIM_ICInit+0x1a2>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2870
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 18e:	f647 53ff 	movw	r3, #32255	; 0x7dff
 192:	f2c0 0300 	movt	r3, #0	; 0x0
 196:	ea01 0303 	and.w	r3, r1, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2871
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 19a:	ea4e 0303 	orr.w	r3, lr, r3
 19e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2856
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 1a2:	f640 43ff 	movw	r3, #3327	; 0xcff
 1a6:	f2c0 0300 	movt	r3, #0	; 0x0
 1aa:	ea00 0303 	and.w	r3, r0, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2857
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 1ae:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 1b2:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2858
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 1b4:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 1b8:	b29b      	uxth	r3, r3
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2874
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 1ba:	83a3      	strh	r3, [r4, #28]
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2875
  TIMx->CCER = tmpccer;
 1bc:	8422      	strh	r2, [r4, #32]
TIM_ICInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:642
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1be:	4620      	mov	r0, r4
 1c0:	88e9      	ldrh	r1, [r5, #6]
 1c2:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:644
  }
}
 1c6:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:123
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   0:	b510      	push	{r4, lr}
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:127
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   2:	f642 4300 	movw	r3, #11264	; 0x2c00
   6:	f2c4 0301 	movt	r3, #16385	; 0x4001
   a:	4298      	cmp	r0, r3
   c:	d10c      	bne.n	28 <TIM_DeInit+0x28>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:129
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
   e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  12:	f04f 0101 	mov.w	r1, #1	; 0x1
  16:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:130
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  1e:	f04f 0100 	mov.w	r1, #0	; 0x0
  22:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  26:	e12a      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:132
  }     
  else if (TIMx == TIM2)
  28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  2c:	d10b      	bne.n	46 <TIM_DeInit+0x46>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:134
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  2e:	f04f 0001 	mov.w	r0, #1	; 0x1
  32:	4601      	mov	r1, r0
  34:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:135
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  38:	f04f 0001 	mov.w	r0, #1	; 0x1
  3c:	f04f 0100 	mov.w	r1, #0	; 0x0
  40:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  44:	e11b      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:137
  }
  else if (TIMx == TIM3)
  46:	f240 4300 	movw	r3, #1024	; 0x400
  4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  4e:	4298      	cmp	r0, r3
  50:	d10c      	bne.n	6c <TIM_DeInit+0x6c>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:139
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  52:	f04f 0002 	mov.w	r0, #2	; 0x2
  56:	f04f 0101 	mov.w	r1, #1	; 0x1
  5a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:140
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  5e:	f04f 0002 	mov.w	r0, #2	; 0x2
  62:	f04f 0100 	mov.w	r1, #0	; 0x0
  66:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  6a:	e108      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:142
  }
  else if (TIMx == TIM4)
  6c:	f640 0300 	movw	r3, #2048	; 0x800
  70:	f2c4 0300 	movt	r3, #16384	; 0x4000
  74:	4298      	cmp	r0, r3
  76:	d10c      	bne.n	92 <TIM_DeInit+0x92>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:144
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  78:	f04f 0004 	mov.w	r0, #4	; 0x4
  7c:	f04f 0101 	mov.w	r1, #1	; 0x1
  80:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:145
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  84:	f04f 0004 	mov.w	r0, #4	; 0x4
  88:	f04f 0100 	mov.w	r1, #0	; 0x0
  8c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  90:	e0f5      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:147
  } 
  else if (TIMx == TIM5)
  92:	f640 4300 	movw	r3, #3072	; 0xc00
  96:	f2c4 0300 	movt	r3, #16384	; 0x4000
  9a:	4298      	cmp	r0, r3
  9c:	d10c      	bne.n	b8 <TIM_DeInit+0xb8>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:149
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  9e:	f04f 0008 	mov.w	r0, #8	; 0x8
  a2:	f04f 0101 	mov.w	r1, #1	; 0x1
  a6:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:150
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  aa:	f04f 0008 	mov.w	r0, #8	; 0x8
  ae:	f04f 0100 	mov.w	r1, #0	; 0x0
  b2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  b6:	e0e2      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:152
  } 
  else if (TIMx == TIM6)
  b8:	f241 0300 	movw	r3, #4096	; 0x1000
  bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
  c0:	4298      	cmp	r0, r3
  c2:	d10c      	bne.n	de <TIM_DeInit+0xde>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:154
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  c4:	f04f 0010 	mov.w	r0, #16	; 0x10
  c8:	f04f 0101 	mov.w	r1, #1	; 0x1
  cc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:155
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  d0:	f04f 0010 	mov.w	r0, #16	; 0x10
  d4:	f04f 0100 	mov.w	r1, #0	; 0x0
  d8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  dc:	e0cf      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:157
  } 
  else if (TIMx == TIM7)
  de:	f241 4300 	movw	r3, #5120	; 0x1400
  e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  e6:	4298      	cmp	r0, r3
  e8:	d10c      	bne.n	104 <TIM_DeInit+0x104>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:159
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
  ea:	f04f 0020 	mov.w	r0, #32	; 0x20
  ee:	f04f 0101 	mov.w	r1, #1	; 0x1
  f2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:160
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  f6:	f04f 0020 	mov.w	r0, #32	; 0x20
  fa:	f04f 0100 	mov.w	r1, #0	; 0x0
  fe:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 102:	e0bc      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:162
  } 
  else if (TIMx == TIM8)
 104:	f243 4300 	movw	r3, #13312	; 0x3400
 108:	f2c4 0301 	movt	r3, #16385	; 0x4001
 10c:	4298      	cmp	r0, r3
 10e:	d10c      	bne.n	12a <TIM_DeInit+0x12a>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:164
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 114:	f04f 0101 	mov.w	r1, #1	; 0x1
 118:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:165
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 11c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 120:	f04f 0100 	mov.w	r1, #0	; 0x0
 124:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 128:	e0a9      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:167
  }
  else if (TIMx == TIM9)
 12a:	f644 4300 	movw	r3, #19456	; 0x4c00
 12e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 132:	4298      	cmp	r0, r3
 134:	d10c      	bne.n	150 <TIM_DeInit+0x150>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:169
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 136:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 13a:	f04f 0101 	mov.w	r1, #1	; 0x1
 13e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:170
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 142:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 146:	f04f 0100 	mov.w	r1, #0	; 0x0
 14a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 14e:	e096      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:172
   }  
  else if (TIMx == TIM10)
 150:	f245 0300 	movw	r3, #20480	; 0x5000
 154:	f2c4 0301 	movt	r3, #16385	; 0x4001
 158:	4298      	cmp	r0, r3
 15a:	d10c      	bne.n	176 <TIM_DeInit+0x176>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:174
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 15c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 160:	f04f 0101 	mov.w	r1, #1	; 0x1
 164:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:175
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 168:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 16c:	f04f 0100 	mov.w	r1, #0	; 0x0
 170:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 174:	e083      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:177
  }  
  else if (TIMx == TIM11) 
 176:	f245 4300 	movw	r3, #21504	; 0x5400
 17a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 17e:	4298      	cmp	r0, r3
 180:	d10c      	bne.n	19c <TIM_DeInit+0x19c>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:179
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 182:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 186:	f04f 0101 	mov.w	r1, #1	; 0x1
 18a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:180
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 18e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 192:	f04f 0100 	mov.w	r1, #0	; 0x0
 196:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 19a:	e070      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:182
  }  
  else if (TIMx == TIM12)
 19c:	f641 0300 	movw	r3, #6144	; 0x1800
 1a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 1a4:	4298      	cmp	r0, r3
 1a6:	d10c      	bne.n	1c2 <TIM_DeInit+0x1c2>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:184
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 1a8:	f04f 0040 	mov.w	r0, #64	; 0x40
 1ac:	f04f 0101 	mov.w	r1, #1	; 0x1
 1b0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:185
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 1b4:	f04f 0040 	mov.w	r0, #64	; 0x40
 1b8:	f04f 0100 	mov.w	r1, #0	; 0x0
 1bc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 1c0:	e05d      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:187
  }  
  else if (TIMx == TIM13) 
 1c2:	f641 4300 	movw	r3, #7168	; 0x1c00
 1c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 1ca:	4298      	cmp	r0, r3
 1cc:	d10c      	bne.n	1e8 <TIM_DeInit+0x1e8>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:189
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 1ce:	f04f 0080 	mov.w	r0, #128	; 0x80
 1d2:	f04f 0101 	mov.w	r1, #1	; 0x1
 1d6:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:190
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 1da:	f04f 0080 	mov.w	r0, #128	; 0x80
 1de:	f04f 0100 	mov.w	r1, #0	; 0x0
 1e2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 1e6:	e04a      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:192
  }
  else if (TIMx == TIM14) 
 1e8:	f242 0300 	movw	r3, #8192	; 0x2000
 1ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 1f0:	4298      	cmp	r0, r3
 1f2:	d10c      	bne.n	20e <TIM_DeInit+0x20e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:194
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 1f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 1f8:	f04f 0101 	mov.w	r1, #1	; 0x1
 1fc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:195
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 200:	f44f 7080 	mov.w	r0, #256	; 0x100
 204:	f04f 0100 	mov.w	r1, #0	; 0x0
 208:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 20c:	e037      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:197
  }        
  else if (TIMx == TIM15)
 20e:	f244 0300 	movw	r3, #16384	; 0x4000
 212:	f2c4 0301 	movt	r3, #16385	; 0x4001
 216:	4298      	cmp	r0, r3
 218:	d10c      	bne.n	234 <TIM_DeInit+0x234>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:199
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 21a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 21e:	f04f 0101 	mov.w	r1, #1	; 0x1
 222:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:200
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 226:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 22a:	f04f 0100 	mov.w	r1, #0	; 0x0
 22e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 232:	e024      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:202
  } 
  else if (TIMx == TIM16)
 234:	f244 4300 	movw	r3, #17408	; 0x4400
 238:	f2c4 0301 	movt	r3, #16385	; 0x4001
 23c:	4298      	cmp	r0, r3
 23e:	d10c      	bne.n	25a <TIM_DeInit+0x25a>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:204
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 240:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 244:	f04f 0101 	mov.w	r1, #1	; 0x1
 248:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:205
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 24c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 250:	f04f 0100 	mov.w	r1, #0	; 0x0
 254:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 258:	e011      	b.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:209
  } 
  else
  {
    if (TIMx == TIM17)
 25a:	f644 0300 	movw	r3, #18432	; 0x4800
 25e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 262:	4298      	cmp	r0, r3
 264:	d10b      	bne.n	27e <TIM_DeInit+0x27e>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:211
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 266:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 26a:	f04f 0101 	mov.w	r1, #1	; 0x1
 26e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:212
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 272:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 276:	f04f 0100 	mov.w	r1, #0	; 0x0
 27a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\Adrian\Desktop\Termostat\Test2\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:215
    }  
  }
}
 27e:	bd10      	pop	{r4, pc}
